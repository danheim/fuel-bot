import { Command, Hears, Start, Update } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import { InjectQueue } from '@nestjs/bull';
import { Queue } from 'bull';
import { Logger } from '@nestjs/common';

@Update()
export class TelegramUpdate {
  private readonly logger = new Logger(TelegramUpdate.name);

  constructor(@InjectQueue('fuel') private readonly fuelQueue: Queue) {}

  @Start()
  async startCommand(ctx: Context) {
    const { first_name } = ctx.message.from;

    try {
      const messages = [
        `–ü—Ä–∏–≤–µ—Ç ${first_name}! üëã`,
        `–ú–µ–Ω—è –∑–æ–≤—É—Ç FuelTracker –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n`,
        '- ‚õΩ –ü–æ–∏—Å–∫ –∑–∞–ø—Ä–∞–≤–æ—á–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π —Å –±–µ–Ω–∑–∏–Ω–æ–º –≤ *–ö–∏–µ–≤–µ*\n',
        '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: @tragenstolz',
        '–ù–∞—á–Ω–µ–º –ø–æ–∏—Å–∫?',
      ];

      await ctx.replyWithMarkdown(
        messages.join('\n'),
        Markup.keyboard(['üîç –ò—Å–∫–∞—Ç—å –≤ –ö–∏–µ–≤–µ']).resize(),
      );
    } catch (error) {
      this.logger.error(error);
    }
  }

  @Hears('üîç –ò—Å–∫–∞—Ç—å –≤ –ö–∏–µ–≤–µ')
  hearsSearch(ctx: Context) {
    const { id: senderId } = ctx.message.from;

    this.fuelQueue.add('search', {
      senderId,
      startTime: new Date().getTime(),
    });

    this.logger.log(`Request from: ${ctx.message.from.username}`);
  }

  @Command('counts')
  async counts(ctx: Context) {
    const counts = await this.fuelQueue.getJobCounts();
    const message = JSON.stringify(counts, null, 2);

    await ctx.replyWithMarkdown(message);
  }
}
